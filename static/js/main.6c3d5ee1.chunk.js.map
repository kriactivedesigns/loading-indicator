{"version":3,"sources":["components/loader/Loader.js","components/home/Home.js","App.js","index.js"],"names":["Loader","props","state","radius","size","circumference","Math","PI","offset","this","progress","strokeWidth","outerStroke","innerStroke","fill","fontSize","className","style","width","height","stroke","r","cx","cy","strokeDasharray","strokeDashoffset","Component","timer","undefined","Home","startLoading","setState","isProgressing","startCounter","setInterval","pauseLoading","clearInterval","bind","data-testid","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRAGqBA,G,wDAEjB,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,OAAQ,EAAKF,MAAMG,KACnBC,cAAe,IAASC,KAAKC,GAC7BC,OAAQ,IAASF,KAAKC,IALZ,E,mDASXN,GAAQ,IAAD,EAE8GQ,KAAKR,MAArHS,EAFE,EAEFA,SAFE,IAEQN,YAFR,MAEa,GAFb,MAEiBO,mBAFjB,MAE6B,EAF7B,MAEgCC,mBAFhC,MAE4C,UAF5C,MAEuDC,mBAFvD,MAEmE,UAFnE,MAE8EC,YAF9E,MAEmF,UAFnF,MAE8FC,gBAF9F,MAEuG,GAFvG,EAGJV,EAA2D,GAA1CI,KAAKR,MAAMG,KAAuB,EAAdO,GAA0BL,KAAKC,GACpEC,EAASH,EAAgBK,EAAW,IAAML,EAEhD,OACI,qBAAKW,UAAU,mBAAf,SACI,sBAAKA,UAAU,0BAA0BC,MAAO,CACAC,MAAc,EAAPd,EACPe,OAAe,EAAPf,GAFxD,UAII,sBAAKY,UAAU,SACXG,OAAe,EAAPf,EACRc,MAAc,EAAPd,EAFX,UAII,wBAAQY,UAAU,sBACdL,YAAaA,EAAc,EAC3BG,KAAMA,EACNM,OAAQR,EACRS,EAAGjB,EAAuB,EAAdO,EACZW,GAAIlB,EACJmB,GAAInB,IAER,wBAAQY,UAAU,sBACdL,YAAaA,EAAc,EAC3BG,KAAK,cACLU,gBAAe,UAAKnB,EAAL,YAAsBA,GACrCoB,iBAAkBjB,EAClBY,OAAQP,EACRQ,EAAGjB,EAAuB,EAAdO,EACZW,GAAIlB,EACJmB,GAAInB,OAGZ,qBAAKY,UAAU,kBAAf,SACI,uBAAMC,MAAO,CAAEF,SAAUA,GAAzB,UAAsCL,EAAtC,kB,GA/CYgB,cCChCC,G,WAAQC,GA6DGC,E,kDAzDX,WAAY5B,GAAO,IAAD,8BACd,cAAMA,IAUV6B,aAAe,WACX,EAAKC,SAAS,CAAEC,eAAgB,IAC5B,EAAK9B,MAAM8B,gBACR,EAAK9B,MAAMQ,SAAW,IACrB,EAAKuB,eAEL,EAAKF,SAAS,CAAErB,SAAU,IAAI,WAC1B,EAAKuB,oBAlBH,EAwBlBA,aAAe,WACXN,EAAQO,aAAY,WAChB,EAAKH,SAAS,CAAErB,SAAU,EAAKR,MAAMQ,SAAW,IAAK,WACvB,KAAvB,EAAKR,MAAMQ,UACV,EAAKyB,oBAGd,MA/BW,EAkClBA,aAAe,WACX,EAAKJ,SAAS,CAAEC,eAAgB,IAAS,WAClCL,GACCS,cAAcT,OAnCtB,EAAKzB,MAAQ,CACTQ,SAAU,EACVsB,eAAe,GAGnB,EAAKF,aAAe,EAAKA,aAAaO,KAAlB,gBAPN,E,qDA2Cd,OACI,qBAAKrB,UAAU,iBAAf,SACI,sBAAKsB,cAAY,4BAA4BtB,UAAU,oBAAvD,UACI,cAAC,EAAD,CAAQN,SAAUD,KAAKP,MAAMQ,SAAUN,KAAM,GAAIO,YAAa,GAAIC,YAAY,UAAUC,YAAY,UAAUC,KAAK,UAAUC,SAAU,KACvI,sBAAKC,UAAU,UAAf,UACI,qBAAKsB,cAAY,eAAetB,UAAU,MAAMuB,QAAS9B,KAAKqB,aAA9D,mBACA,qBAAKQ,cAAY,eAAetB,UAAU,MAAMuB,QAAS9B,KAAK0B,aAA9D,+B,GAnDLT,aCGJc,MANf,WACE,OACE,cAAC,EAAD,KCAJC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MACmBC,SAASC,eAAe,W","file":"static/js/main.6c3d5ee1.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './loaderStyles.scss'\r\n\r\nexport default class Loader extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            radius: this.props.size,\r\n            circumference: 56 * 2 * Math.PI,\r\n            offset: 56 * 2 * Math.PI,\r\n        }\r\n    }\r\n\r\n    render(props) {\r\n        \r\n        const { progress, size=60, strokeWidth=4, outerStroke=\"#FF0000\", innerStroke=\"#00FF00\", fill=\"#FFFFFF\", fontSize=25 } = this.props\r\n        const circumference = (this.props.size - ( strokeWidth * 2 ) ) * 2 * Math.PI\r\n        const offset = circumference - progress / 100 * circumference\r\n        \r\n        return ( \r\n            <div className=\"loader-component\" >\r\n                <div className=\"loader-circle-container\" style={{\r\n                                                                width: size * 2,\r\n                                                                height: size * 2\r\n                                                            }}>\r\n                    <svg className=\"loader\"\r\n                        height={size * 2}\r\n                        width={size * 2}\r\n                        >\r\n                        <circle className=\"loader-outer-circle\"\r\n                            strokeWidth={strokeWidth + 2}\r\n                            fill={fill}\r\n                            stroke={outerStroke}\r\n                            r={size - ( strokeWidth * 2 )}\r\n                            cx={size}\r\n                            cy={size}\r\n                        />\r\n                        <circle className=\"loader-inner-circle\"\r\n                            strokeWidth={strokeWidth - 2}\r\n                            fill=\"transparent\"\r\n                            strokeDasharray={`${circumference} ${circumference}`}\r\n                            strokeDashoffset={offset}\r\n                            stroke={innerStroke}\r\n                            r={size - ( strokeWidth * 2 )}\r\n                            cx={size}\r\n                            cy={size}\r\n                        />\r\n                    </svg>\r\n                    <div className=\"loader-progress\">\r\n                        <span style={{ fontSize: fontSize }}>{progress}%</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Loader from '../loader/Loader'\r\nimport './homeStyles.scss'\r\n\r\nvar timer = undefined\r\n\r\nclass Home extends Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            progress: 0,\r\n            isProgressing: false,\r\n        }\r\n\r\n        this.startLoading = this.startLoading.bind(this)\r\n\r\n    }\r\n    \r\n    startLoading = () => {\r\n        this.setState({ isProgressing : true })\r\n        if(!this.state.isProgressing){\r\n            if(this.state.progress < 100){\r\n                this.startCounter()\r\n            }else{\r\n                this.setState({ progress: 0 },() => {\r\n                    this.startCounter()\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    startCounter = () => {\r\n        timer = setInterval(() => {\r\n            this.setState({ progress: this.state.progress + 1 }, () => {\r\n                if(this.state.progress == 100){\r\n                    this.pauseLoading()\r\n                }\r\n            })\r\n        }, 100)\r\n    }\r\n\r\n    pauseLoading = () => {\r\n        this.setState({ isProgressing : false }, () => {\r\n            if(timer){\r\n                clearInterval(timer)\r\n            }\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"home-container\">\r\n                <div data-testid=\"circular-loader-component\" className=\"content-container\">\r\n                    <Loader progress={this.state.progress} size={80} strokeWidth={10} outerStroke=\"#ddfff8\" innerStroke=\"#02C39A\" fill=\"#FFFFFF\" fontSize={30}/>\r\n                    <div className=\"buttons\">\r\n                        <div data-testid=\"start-button\" className=\"btn\" onClick={this.startLoading}>Start</div>\r\n                        <div data-testid=\"pause-button\" className=\"btn\" onClick={this.pauseLoading}>Pause</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home","import React from 'react'\nimport Home from './components/home/Home'\n\nfunction App() {\n  return (\n    <Home/>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>, document.getElementById('root')\n);\n\n"],"sourceRoot":""}